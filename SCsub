#!/usr/bin/env python

Import("env")
Import("env_modules")

import methods

src_dir = "src/"
cl_src_dir = src_dir+"client/"
sv_src_dir = src_dir+"server/"
sh_src_dir = src_dir+"shared/"

env_zip = env_modules.Clone()
env_zip.Append(CPPPATH=["src/"])

if methods.get_cmdline_bool("quality_game_code", True):
    env_zip.Append(CCFLAGS=["-Werror=return-type"])

if methods.get_cmdline_bool("debug_game", False):
    env_zip.Append(CCFLAGS=["-g"])

# Non-elegant but without this project won't build with networking headers
env_zip.Prepend(CPPPATH=["#thirdparty/enet/"])

sources = Glob("*.cpp")

sources += Glob("src/*.cpp")

sources += Glob(cl_src_dir+"*.cpp")
sources += Glob(cl_src_dir+"status_effects/*.cpp")
sources += Glob(cl_src_dir+"status_effects/mercenaries/tundra/*.cpp")

sources += Glob(cl_src_dir+"entities/*.cpp")
sources += Glob(cl_src_dir+"entities/mercenaries/*.cpp")
sources += Glob(cl_src_dir+"entities/mercenaries/aal/*.cpp")
sources += Glob(cl_src_dir+"entities/mercenaries/tundra/*.cpp")
sources += Glob(cl_src_dir+"entities/mercenaries/fist_mercenary/*.cpp")
sources += Glob(cl_src_dir+"game_logic/abilities/*.cpp")
sources += Glob(cl_src_dir+"game_logic/abilities/aal/*.cpp")
sources += Glob(cl_src_dir+"game_logic/abilities/tundra/*.cpp")
sources += Glob(cl_src_dir+"game_logic/abilities/fist_mercenary/*.cpp")
sources += Glob(cl_src_dir+"string_names/*.cpp")
sources += Glob(cl_src_dir+"ui/*.cpp")

sources += Glob(sh_src_dir+"helpers/*.cpp")

#env.Append(CCFLAGS=["-Wl,-rpath,'\$ORIGIN'"])

#if ARGUMENTS.get('summator_shared', 'no') == 'yes':
if False:
    # Shared lib compilation
    env_zip.Append(CCFLAGS=['-fPIC'])
    #env_zip['LIBS'] = ["godot.linuxbsd.editor.x86_64.old"]
    #env_zip.Append(LIBPATH=['#bin'])
    shared_lib = env_zip.SharedLibrary(target='#bin/bin/client', source=sources)
    shared_lib_shim = shared_lib[0].name.rsplit('.', 1)[0]
    print("Here: ", shared_lib_shim)
    env.Append(LIBS=[shared_lib_shim])
    env.Append(LIBPATH=['#bin/bin'])
else:
    # Module files
    env_zip.add_source_files(env.modules_sources, sources)
