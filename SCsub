#!/usr/bin/env python

Import("env")
Import("env_modules")

import methods
import os
import fnmatch

src_dir = "src/"
cl_src_dir = src_dir+"client/"
sv_src_dir = src_dir+"server/"
sh_src_dir = src_dir+"shared/"
exp_src_dir = src_dir+"experimental/"

def recursive_glob(dir):
    matches = []
    for root, dirnames, filenames in os.walk(dir):
        for filename in fnmatch.filter(filenames, '*.cpp'):
            matches.append(Glob(os.path.join(root, filename)))
    return matches

env_zip = env_modules.Clone()
env_zip.Append(CPPPATH=["src/", sv_src_dir, cl_src_dir])

# Temporary commented out to compile with MSVC
# if methods.get_cmdline_bool("quality_game_code", True):
    # env_zip.Append(CCFLAGS=["-Werror=return-type"])

# if methods.get_cmdline_bool("debug_game", False):
    # env_zip.Append(CPPDEFINES=["DEBUG_ARTSKR"])
    # env_zip.Append(CCFLAGS=["-g"])
    # # Disable optimization to make debugging easier
    # env_zip.Append(CCFLAGS=["-O0"])

# Non-elegant but without this project won't build with networking headers
env_zip.Prepend(CPPPATH=["#thirdparty/enet/"])

sources = Glob("*.cpp")

sources += Glob("src/*.cpp")

build_subtype = ARGUMENTS.get("game_target")

if(build_subtype == "client"): # Client build only code
    env_zip.Append(CPPDEFINES=["CLIENT"])
    sources += recursive_glob(cl_src_dir)
    
elif(build_subtype == "server"): # Server build only code
    env_zip.Append(CPPDEFINES=["SERVER"])
    sources += recursive_glob(sv_src_dir)
else:
    print("\"game_target\" undefined!")
    Exit(255)

# Both client and server
sources += recursive_glob(sh_src_dir)
sources += recursive_glob(exp_src_dir)
    
env_zip.add_source_files(env.modules_sources, sources)
